🔍 Detailed Explanation: Python Functions

https://docs.python.org/3/library/functions.html

📘 What is a Function?
A function is a named, reusable block of code designed to perform a specific task. Functions help break complex problems into smaller, manageable pieces. Instead of rewriting the same code, you can define it once and call it whenever needed.

🎯 Why Use Functions?
Functions provide:

Reusability – Write code once, use it many times.

Modularity – Split large programs into logical chunks.

Abstraction – Hide complex logic behind a simple name.

Maintainability – Update logic in one place, apply everywhere.

Testing – Easy to isolate and test specific logic.

🔧 Function Definition and Components
When defining a function, you're essentially creating a mini-program within your program.

A function includes:
Function name – Should describe the action (e.g., calculate_tax, greet_user).

Parameters – Placeholders for input values.

Docstring (optional) – Describes what the function does.

Function body – The actual code to run.

Return statement (optional) – Sends data back to the caller.

🧩 Parameters vs Arguments
Parameters are variable names used in a function definition.

Arguments are the actual values passed when calling the function.
def greet(name):    ← 'name' is a parameter
greet("Alice")      ← "Alice" is an argument


🗂 Types of Parameters
Python supports flexible ways to pass values to functions:

| Type             | Symbol     | Description                                |
| ---------------- | ---------- | ------------------------------------------ |
| Positional       | —          | Based on order of appearance               |
| Keyword          | key=value  | Specified by parameter name                |
| Default          | def f(x=0) | Uses default value if not passed           |
| Arbitrary        | \*args     | Packs extra positional args into a tuple   |
| Arbitrary Kwargs | \*\*kwargs | Packs extra keyword args into a dictionary |


🔄 Return Values
Functions can return:

A single value (default, using return)

Multiple values as a tuple

Nothing (returns None implicitly if no return)

Once a return statement is executed, the function exits immediately.

🧠 Scope of Variables
Python uses LEGB scope rule:

| Scope     | Description                                |
| --------- | ------------------------------------------ |
| Local     | Inside the current function                |
| Enclosing | In outer functions (if function is nested) |
| Global    | At the top-level of the script/module      |
| Built-in  | Provided by Python (`print`, `len`, etc.)  |


A variable created in a function is local by default, unless declared global.

🔍 Anonymous Functions (Lambdas)
Python supports lambda functions for short, unnamed, one-line functions.

They’re best for quick operations and functional programming patterns (e.g., in map(), filter()).

🧪 First-Class Functions
Python treats functions as first-class citizens:

Can be passed as arguments

Can be returned from other functions

Can be assigned to variables

Can be stored in data structures

This supports higher-order functions, like decorators or functional utilities.

📌 Function Naming and Style (PEP 8)
Use lowercase_with_underscores

Use verb-noun structure for clarity (get_user_data())

Add docstrings using triple quotes """...""" to describe functionality

Keep functions small and single-purpose

❗ Common Mistakes
Forgetting parentheses when calling: print vs. print()

Confusing return vs. print

Shadowing global variables unintentionally

Using mutable default arguments (like lists or dicts)

Missing return in a function that should return something

🧠 Summary of Function Concepts
| Concept              | Meaning                                                    |
| -------------------- | ---------------------------------------------------------- |
| Function             | Block of code with a name                                  |
| `def`                | Defines a function                                         |
| `return`             | Sends a value back                                         |
| `*args`              | Accepts variable number of positional arguments            |
| `**kwargs`           | Accepts variable number of keyword arguments               |
| Scope                | Local and global variable access                           |
| Lambda               | Anonymous, short function                                  |
| First-class function | Can be treated like any other object                       |
| Docstring            | Descriptive text block inside a function for documentation |
